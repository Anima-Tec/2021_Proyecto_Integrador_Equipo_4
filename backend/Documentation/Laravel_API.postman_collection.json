{
	"info": {
		"_postman_id": "2a9066a5-899b-4923-bb99-a7f7c8bce1ce",
		"name": "Laravel_API",
		"description": "Since the entire backend was refactored, a new documentation file is in order.\n\nKeep in mind that since JWT is now fully functional, you will have to provide a Bearer token along with your requests (register, login and activate do not require it, of course).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "fullName",
									"value": "String",
									"description": "The user's full name.",
									"type": "text"
								},
								{
									"key": "email",
									"value": "email@email.com",
									"description": "This email will be used to verify the user. ",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123456789",
									"description": "Minimum length is 8.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/register",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"register"
							]
						},
						"description": "An email will be sent to the user's address to activate the account in the next step."
					},
					"response": []
				},
				{
					"name": "Activate account",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "email@email.com",
									"type": "text"
								},
								{
									"key": "token",
									"value": "286286",
									"description": "This token is sent via email.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/activate",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"activate"
							]
						},
						"description": "Allows the account in question to be logged on to."
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "email@email.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123456789",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"login"
							]
						},
						"description": "The bearer token provided by this endpoint does not expire, so a refresh token is not included in the response."
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "3|bpGwiwin66txid0oCkWDTFg9FsY5UAEZNfRIYd5B",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/logout",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"logout"
							]
						},
						"description": "The bearer token will be used to log the user out."
					},
					"response": []
				}
			],
			"description": "All requests that handle user data and accounts."
		},
		{
			"name": "Pots",
			"item": [
				{
					"name": "Create a pot",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "2|C4MnYnP7IeByR9nfDbYY32Te8bPunB4vGsiqzVDB",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Pot Name",
									"type": "text"
								},
								{
									"key": "desc",
									"value": "Pot description",
									"type": "text"
								},
								{
									"key": "openFrom",
									"value": "10:00",
									"type": "text"
								},
								{
									"key": "to",
									"value": "18:00",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/kevin/Downloads/Image.jpg"
								},
								{
									"key": "address",
									"value": "Pot address",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/pots/save",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"pots",
								"save"
							]
						},
						"description": "Stores a new pot in the database.\n\nKeep in mind that this request's body must be in the form-data format and the image extension can be JPG, PNG, JPEG, GIF or SVG."
					},
					"response": []
				},
				{
					"name": "Get all pots",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "2|C4MnYnP7IeByR9nfDbYY32Te8bPunB4vGsiqzVDB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/pots",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"pots"
							]
						},
						"description": "Returns an array containing all existing pots."
					},
					"response": []
				},
				{
					"name": "Get pots user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "2|C4MnYnP7IeByR9nfDbYY32Te8bPunB4vGsiqzVDB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/pots/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"pots",
								"user"
							]
						},
						"description": "Returns all active pots created by the current user."
					},
					"response": []
				},
				{
					"name": "Get one pot",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/pots/<id>",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"pots",
								"<id>"
							]
						},
						"description": "Returns the pot that matches the provided ID."
					},
					"response": []
				}
			],
			"description": "Services related with pots."
		},
		{
			"name": "Donations",
			"item": [
				{
					"name": "Create a donation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4|JVzcvK8auIoNVrIv5nWF5i2FZOikEMqkSESE1jVc",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "potId",
									"value": "1",
									"description": "The pot which is being donated to.",
									"type": "text"
								},
								{
									"key": "donationType",
									"value": "Food",
									"description": "Product that is being donated.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/donations/save",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"donations",
								"save"
							]
						},
						"description": "Creates a new donation and stores in the database."
					},
					"response": []
				},
				{
					"name": "Get all donations from user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4|JVzcvK8auIoNVrIv5nWF5i2FZOikEMqkSESE1jVc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/donations",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"donations"
							]
						},
						"description": "Returns all donations made by the user that is currently logged in."
					},
					"response": []
				}
			],
			"description": "All endpoints related to donations."
		},
		{
			"name": "Pagers",
			"item": [
				{
					"name": "Pager",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/<contentType>/<offset>/<limit>",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"<contentType>",
								"<offset>",
								"<limit>"
							]
						},
						"description": "Returns all content regardless of its author while allowing pagination.\n\nThe 'contentType' param can either be 'donations' or 'pots', while 'offset' and 'limit' should both be integers.\n\nIn each response will be included the amount of pages that there are left (this value is obtained via the offset, limit and amount of content in the database). Once this value reaches 0, it means that there is no more content to be displayed."
					},
					"response": []
				},
				{
					"name": "Pager with auth",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "6|v3WB13EJqq27p9iI9POA5SZfJaJ2ltfQZsnPjsJT",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/auth/<contentType>/<offset>/<limit>",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"auth",
								"<contentType>",
								"<offset>",
								"<limit>"
							]
						},
						"description": "Returns content created by the current user while allowing pagination.\n\nThe 'contentType' param can either be 'donations' or 'pots', while 'offset' and 'limit' should both be integers.\n\nIn each response will be included the amount of pages that there are left (this value is obtained via the offset, limit and amount of content in the database). Once this value reaches 0, it means that there is no more content to be displayed."
					},
					"response": []
				}
			],
			"description": "Here are all the endpoints that paginate content. \n\nThey both do the same thing, although one requires a Bearer token since it returns content that the current user created."
		}
	]
}